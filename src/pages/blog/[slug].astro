---
import LayoutWithoutTransitions from "../../components/LayoutWithoutTransitions.astro";
import { supabase, Post } from "../../utils/database";

export async function getStaticPaths() {
  if (!supabase) return { paths: [], fallback: false };

  const { data, error } = await supabase.from("posts").select("slug");
  if (!data || error) return { paths: [], fallback: false };

  return {
    paths: data.map((row) => ({
      params: { slug: row.slug },
    })),
    fallback: false,
  };
}

const { slug } = Astro.params;

let post: Post | null = null;
let error: any = null;

if (supabase) {
  const { data, error: fetchError } = await supabase
    .from("posts")
    .select("*")
    .eq("slug", slug)
    .single();

  post = data;
  error = fetchError;

  // ✅ Increment view count
//   if (post) {
//     await supabase
//       .from("posts")
//       .update({ views: post.views + 1 })
//       .eq("slug", slug);
//   }
// } else {
//   error = new Error("Supabase client is not initialized");
}
---

<LayoutWithoutTransitions title={post ? post.title : "Post Not Found"}>
  {
    error || !post ? (
      <p class="text-red-500">
        Error loading post: {error?.message || "Not found"}
      </p>
    ) : (
      <article class="max-w-2xl mx-auto p-8 border border-gray-300 rounded-lg shadow">
        <h1 class="text-3xl font-bold mb-4">{post.title}</h1>
        {/* <a href="/blog" class="mb-4 inline-block hover:underline">← Back</a> */}
        <p class="text-sm text-gray-400">
          By {post.author} on {new Date(post.created_at).toLocaleDateString()} ·{" "}
          {post.views} views ·{" "} {post.likes} likes
        </p>
        <div class="mt-4 flex gap-2">
              {post.tags.map(tag => (
                <span class="text-xs bg-gray-300 px-2 py-1 rounded">{tag}</span>
              ))}
            </div>

        <div class="prose prose-neutral mt-6" set:html={post.content} />

        <div class="flex items-center mt-4">
          <img
            id="like-button"
            class="w-5 h-5 cursor-pointer transition-opacity hover:opacity-80"
            src="/images/heart.svg"
            alt="Like"
            data-slug={post.slug}
            data-liked="false"
          />
          <span id="like-count" class="ml-1 text-md font-semibold">{post.likes}</span>
        </div>

        <a href="/blog" class="mt-6 inline-block text-blue-500 hover:underline">
          ← Back to Blog
        </a>
      </article>
    )
  }
</LayoutWithoutTransitions>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const likeButton = document.getElementById("like-button");
    const likeCount = document.getElementById("like-count");
    const slug = likeButton.dataset.slug;

    // Check localStorage for liked state
    if (localStorage.getItem(`liked_${slug}`)) {
      likeButton.src = "/images/heart-filled.svg";
      likeButton.dataset.liked = "true";
      likeButton.style.pointerEvents = "none"; // Prevent clicking after liking
    }

    likeButton.addEventListener("click", async () => {
      if (likeButton.dataset.liked === "true") return; // Prevent multiple likes

      try {
        const response = await fetch("/api/like-post", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ slug })
        });

        const result = await response.json();
        if (result.success) {
          likeCount.textContent = result.newLikes;
          likeButton.src = "/images/heart-filled.svg";
          likeButton.dataset.liked = "true";

          // Mark as liked in localStorage
          localStorage.setItem(`liked_${slug}`, "true");

          // Prevent further clicks
          likeButton.style.pointerEvents = "none";
        } else {
          console.error("Error:", result.error);
        }
      } catch (error) {
        console.error("Failed to like post:", error);
      }
    });
  });
</script>
