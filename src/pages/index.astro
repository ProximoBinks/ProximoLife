---
import Layout from "../components/Layout.astro";
---

<Layout title="proximo | Home">
  <div class="desktop bg-white w-full h-screen relative overflow-hidden select-none">

    <!-- TEAM Folder Icon: Double-click to open a Finder-like window -->
    <div id="folderIcon" class="draggable" style="right:50px; top:50px;">
      <img src="/images/Folder.png" alt="Folder" class="icon" draggable="false"/>
      <p class="mt-1 text-center text-[12px] font-[600]">Folder</p>
    </div>
    
    <!-- The Finder-like “TEAM Window” (hidden by default) -->
    <div id="teamWindow" class="window hidden" style="left:200px; top:100px;">
      <!-- Title bar to drag the window around -->
      <div class="title-bar flex justify-between items-center p-2 bg-gray-200 cursor-grab">
        <span>TEAM</span>
        <button id="closeTeamWindow" class="px-2 py-1 bg-red-500 text-white">X</button>
      </div>
      
      <!-- Window content area -->
      <div class="window-content p-4 bg-white">
        <p>chlo.jpg</p>
        <p>fuz.jpg</p>
        <p>joe.jpg</p>
        <p>v.jpeg</p>
      </div>
    </div>

    <!-- YOUR OTHER ICONS (Finder, Trash, Blog Folder, etc.) -->
    <div id="finder" class="draggable" style="right:150px; top:225px;">
      <img src="/images/Finder.png" alt="Finder" class="icon" draggable="false"/>
      <p class="mt-1 text-center text-[12px] font-[600]">Finder</p>
    </div>
    <div id="trash" class="draggable" style="right:150px; top:335px;">
      <img src="/images/Trash.png" alt="Trash" class="icon" draggable="false"/>
    </div>
    <div id="folderBlog" class="draggable" style="right:50px; top:150px;">
      <img src="/images/DeveloperFolder.png" alt="Folder" class="icon" draggable="false"/>
      <p class="mt-1 text-center text-[12px] font-[600]">Blog</p>
    </div>
  </div>

  <script>
    // Keep track of the highest z-index so the last clicked item is "on top"
    let highestZIndex = 10;
    const DRAG_THRESHOLD = 3;
    const desktop = document.querySelector(".desktop");

    // Make each icon and window draggable using your existing logic
    const allDraggables = document.querySelectorAll(".draggable");
    allDraggables.forEach((item) => makeDraggable(item));

    // Access the TEAM window and make it draggable by its title bar
    const teamWindow = document.getElementById("teamWindow");
    const titleBar = teamWindow.querySelector(".title-bar");
    makeDraggable(teamWindow, titleBar);

    // Show TEAM window on double-click
    const folderIcon = document.getElementById("folderIcon");
    folderIcon.addEventListener("dblclick", () => {
      teamWindow.classList.remove("hidden");
      // Bring it to top
      teamWindow.style.zIndex = ++highestZIndex;
    });

    // Close the window
    document.getElementById("closeTeamWindow").addEventListener("click", () => {
      teamWindow.classList.add("hidden");
    });

    /**
     * Make an element draggable. If handleElement is provided, only that sub‐element
     * (e.g., the title bar) initiates the drag. Otherwise the entire element is draggable.
     */
    function makeDraggable(draggable, handleElement) {
      let offsetX = 0;
      let offsetY = 0;
      let startX = 0;
      let startY = 0;
      let isDragging = false;
      const handle = handleElement || draggable;

      handle.addEventListener("pointerdown", pointerDownHandler);

      function pointerDownHandler(e) {
        draggable.style.zIndex = ++highestZIndex;
        startX = e.clientX;
        startY = e.clientY;

        const rect = draggable.getBoundingClientRect();
        offsetX = e.clientX - rect.left;
        offsetY = e.clientY - rect.top;
        isDragging = false;

        document.addEventListener("pointermove", pointerMoveHandler);
        document.addEventListener("pointerup", pointerUpHandler);
      }

      function pointerMoveHandler(e) {
        const deltaX = e.clientX - startX;
        const deltaY = e.clientY - startY;
        if (!isDragging && (Math.abs(deltaX) > DRAG_THRESHOLD || Math.abs(deltaY) > DRAG_THRESHOLD)) {
          isDragging = true;
        }
        if (isDragging) {
          e.preventDefault();
          const desktopRect = desktop.getBoundingClientRect();
          const draggableRect = draggable.getBoundingClientRect();

          let newLeft = e.clientX - offsetX - desktopRect.left;
          let newTop = e.clientY - offsetY - desktopRect.top;

          // (Optional) Clamping to keep within desktop
          newLeft = Math.min(Math.max(newLeft, 0), desktopRect.width - draggableRect.width);
          newTop = Math.min(Math.max(newTop, 0), desktopRect.height - draggableRect.height);

          draggable.style.left = `${newLeft}px`;
          draggable.style.top = `${newTop}px`;
        }
      }

      function pointerUpHandler() {
        document.removeEventListener("pointermove", pointerMoveHandler);
        document.removeEventListener("pointerup", pointerUpHandler);
      }
    }
  </script>
</Layout>
